{"version":3,"sources":["counterBlock/Button.tsx","counterBlock/Input.tsx","counterBlock/CounterComponent.tsx","settingBlock/SettingComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx","counterBlock/Counter.module.css","settingBlock/Setting.module.css"],"names":["Button","props","incButtonValue","value","maxValue","resButtonValue","resetValue","className","s","buttonBlock","onClick","incValue","button","disabled","resetButtonValue","Input","valueBlock","redValue","CounterComponent","counterBlock","SettingComponent","useState","setMaxValue","startValue","setStartValue","useEffect","startNew","localStorage","getItem","startOne","JSON","parse","setFirstStart","max","newMax","setMax","inputBlock","input","inputRedStart","inputArea","type","onChange","e","currentTarget","Number","setWarningMessage","setMessage","start","App","setValue","setFirstStartValue","valueAsString","newValue","resetAsString","resValue","windowBlock","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.36aef5ba.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './Counter.module.css';\r\nimport {SetValueType} from \"../App\";\r\n\r\nexport type ButtonPropsType = {\r\n    incValue: () => void\r\n    resetButtonValue: () => void\r\n    value: SetValueType\r\n    maxValue: SetValueType\r\n    resetValue: SetValueType\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n    let incButtonValue = (props.value === props.maxValue)\r\n        || (props.value === \"\");\r\n    let resButtonValue = (props.value === props.resetValue)\r\n        || (props.value === \"\")\r\n\r\n    return (\r\n        <div className={s.buttonBlock}>\r\n            <button onClick={props.incValue} className={s.button}\r\n                    disabled={incButtonValue}>inc\r\n            </button>\r\n            <button onClick={props.resetButtonValue} className={s.button}\r\n                    disabled={resButtonValue}>reset\r\n            </button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport s from './Counter.module.css';\r\nimport {SetValueType} from \"../App\";\r\n\r\nexport type InputPropsType = {\r\n    value: SetValueType\r\n    maxValue: SetValueType\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    return (\r\n        <div className={s.valueBlock}>\r\n            <div className={(props.value === props.maxValue)\r\n            || (props.value === 'Incorrect value!') ? s.redValue : s.value}> {\r\n                props.value === \"\" ? \"enter values and press set\" : props.value\r\n            }\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport s from './Counter.module.css';\r\nimport {Button} from \"./Button\";\r\nimport {Input} from \"./Input\";\r\nimport {SetValueType} from \"../App\";\r\n\r\nexport type CounterComponentPropsType = {\r\n    incValue: () => void;\r\n    value: SetValueType\r\n    resetButtonValue: () => void\r\n    maxValue: SetValueType\r\n    resetValue: SetValueType\r\n\r\n}\r\n\r\nexport const CounterComponent = (props: CounterComponentPropsType) => {\r\n    return (\r\n        <div className={s.counterBlock}>\r\n            <Input value={props.value}\r\n                   maxValue={props.maxValue}\r\n            />\r\n            <Button incValue={props.incValue}\r\n                    resetButtonValue={props.resetButtonValue}\r\n                    value={props.value}\r\n                    maxValue={props.maxValue}\r\n                    resetValue={props.resetValue}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './Setting.module.css';\r\nimport {SetValueType} from \"../App\";\r\n\r\ntype SettingComponentPropsType = {\r\n    setWarningMessage: () => void\r\n    setMessage: () => void\r\n    setStartValue: (startValue: SetValueType) => void\r\n    setFirstStart: (startValue: SetValueType) => void\r\n    setMax: (maxValue: SetValueType) => void\r\n}\r\nexport const SettingComponent = (props: SettingComponentPropsType) => {\r\n    const [maxValue, setMaxValue] = useState<SetValueType>('');\r\n    const [startValue, setStartValue] = useState<SetValueType>('');\r\n\r\n\r\n    useEffect(() => {\r\n        let startNew = localStorage.getItem('startValue')\r\n        if (startNew) {\r\n            let startOne = JSON.parse(startNew)\r\n            setStartValue(startOne);\r\n            props.setFirstStart(startOne);\r\n\r\n        }\r\n        let max = localStorage.getItem('maxValue');\r\n        if (max) {\r\n            let newMax = JSON.parse(max);\r\n            setMaxValue(newMax);\r\n            props.setMax(newMax)\r\n        }\r\n    }, [])\r\n\r\n    let maxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let max = e.currentTarget.value;\r\n        (max <= startValue || Number(max) < 0) ? props.setWarningMessage()\r\n            : props.setMessage();\r\n        setMaxValue(Number(max));\r\n\r\n    }\r\n    let startValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let start = e.currentTarget.value;\r\n        (start >= maxValue || Number(start) < 0) ? props.setWarningMessage()\r\n            : props.setMessage();\r\n        setStartValue(Number(start));\r\n    }\r\n\r\n    let onClickHandler = () => {\r\n        props.setStartValue(startValue);\r\n        props.setFirstStart(startValue);\r\n        props.setMax(maxValue);\r\n    }\r\n    return (\r\n        <div className={s.counterBlock}>\r\n            <div className={s.inputBlock}>\r\n                <div className={s.input}>\r\n                    max value:\r\n                    <input value={maxValue}\r\n                           className={\r\n                               maxValue <= startValue || maxValue < 0 //|| maxValue === startValue\r\n                                   ? s.inputRedStart : s.inputArea}\r\n                           type={\"number\"} onChange={maxValueHandler}/>\r\n                </div>\r\n                <div className={s.input}>\r\n                    start value:\r\n                    <input value={startValue}\r\n                           className={\r\n                               startValue >= maxValue || startValue < 0 //|| startValue === maxValue\r\n                                   ? s.inputRedStart : s.inputArea}\r\n                           type={\"number\"} onChange={startValueHandler}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttonBlock}>\r\n                <button onClick={onClickHandler}\r\n                        disabled={startValue >= maxValue || startValue < 0 || startValue === \"\"}\r\n                        className={s.button}>set\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, {useEffect, useState} from 'react';\nimport {CounterComponent} from \"./counterBlock/CounterComponent\";\nimport {SettingComponent} from \"./settingBlock/SettingComponent\";\nimport s from \"./counterBlock/Counter.module.css\";\n\nexport type SetValueType = number | string\n\n/*const useStateLS = (initialState: number, key: string) => {\n    const [value, setValue] = useState(initialState)\n    useEffect(() => {\n        let valueAsString = localStorage.getItem(key);\n        if (valueAsString) {\n            let newValue = JSON.parse(valueAsString)\n            setValue(newValue);\n        }\n    },[])\n    const onChange = (value: number) => {\n        localStorage.setItem(key, JSON.stringify(value))\n        setValue(value)\n    }\n    return [value, onChange]\n}*/\n\nfunction App() {\n\n\n    let [value, setValue] = useState<SetValueType>('');\n    let [resetValue, setFirstStartValue] = useState<SetValueType>(0);\n    let [maxValue, setMaxValue] = useState<SetValueType>(0);\n\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('value');\n        if (valueAsString) {\n            let newValue = JSON.parse(valueAsString)\n            setValue(newValue);\n        }\n    }, [])\n\n    function incValue() {\n        if (typeof value === \"number\") {\n            setValue(value + 1)\n            localStorage.setItem('value', JSON.stringify(value + 1))\n        }\n    }\n\n    function setMax(maxValue: SetValueType) {\n        setMaxValue(Number(maxValue))\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    }\n\n    function setStartValue(startValue: SetValueType) {\n        setValue(Number(startValue));\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n    }\n\n    function setFirstStart(startValue: SetValueType) {\n        setFirstStartValue(Number(startValue))\n        localStorage.setItem('resetValue', JSON.stringify(startValue))\n    }\n\n    useEffect(() => {\n        let resetAsString = localStorage.getItem('resetValue');\n        if (resetAsString) {\n            let resValue = JSON.parse(resetAsString)\n            setFirstStartValue(resValue);\n        }\n    }, [])\n\n    function resetButtonValue() {\n        setValue(resetValue)\n        localStorage.setItem('value', JSON.stringify(resetValue))\n\n    }\n\n    function setWarningMessage() {\n        setValue('Incorrect value!')\n    }\n\n    function setMessage() {\n        setValue('enter values and press set')\n    }\n\n    return (\n        <div className={s.windowBlock}>\n            <SettingComponent\n                setMessage={setMessage}\n                setWarningMessage={setWarningMessage}\n                setStartValue={setStartValue}\n                setFirstStart={setFirstStart}\n                setMax={setMax}/>\n            <CounterComponent incValue={incValue}\n                              resetButtonValue={resetButtonValue}\n                              value={value}\n                              maxValue={maxValue}\n                              resetValue={resetValue}\n            />\n        </div>\n    )\n}\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"windowBlock\":\"Counter_windowBlock__2OWUv\",\"counterBlock\":\"Counter_counterBlock__3in8E\",\"valueBlock\":\"Counter_valueBlock__7KYrZ\",\"value\":\"Counter_value__1HzdK\",\"redValue\":\"Counter_redValue__xvO2N\",\"buttonBlock\":\"Counter_buttonBlock__fR_B9\",\"button\":\"Counter_button__3pwH8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterBlock\":\"Setting_counterBlock__3O30L\",\"inputBlock\":\"Setting_inputBlock__RJYWV\",\"buttonBlock\":\"Setting_buttonBlock__26KRO\",\"button\":\"Setting_button__3B6KM\",\"input\":\"Setting_input__3gpWk\",\"inputArea\":\"Setting_inputArea__OhMWm\",\"inputRedMax\":\"Setting_inputRedMax__1brJV\",\"inputRedStart\":\"Setting_inputRedStart__1YXhL\"};"],"sourceRoot":""}